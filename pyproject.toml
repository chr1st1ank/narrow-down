[build-system]
requires = ["maturin>=0.12,<0.13"]
build-backend = "maturin"

[tool.maturin]
bindings = "pyo3"
compatibility = "linux"

[project]
name = "narrow-down"
version = "1.0.0"
description = "Fast fuzzy text search"
readme = "README.md"
requires-python = "<3.11,>=3.7"
license = {file = "LICENSE.rst"}
keywords = ["narrow-down", "LSH", "minhash"]
classifiers=[
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
]

dependencies = [
    "numpy<1.22; python_version < '3.8'",
    "numpy; python_version >= '3.8'",
    "scipy",
    "typing_extensions",
    "protobuf~=3.15",  # >= 3.15 to support optional fields
    "types-protobuf"
]

[project.urls]
homepage = "https://github.com/chr1st1ank/narrow-down"
repository = "https://github.com/chr1st1ank/narrow-down"
documentation = "https://chr1st1ank.github.io/narrow-down"
"Bug Tracker" = "https://github.com/chr1st1ank/narrow-down/issues"

[project.optional-dependencies]
scylladb = [
    "scylla-driver"
]
docs = [
    "sphinx",
    "myst-parser",
    "nbconvert",
    "furo"
]
dev = [
    "pre-commit",
    "invoke",
    "flake8~=4.0",  # Don't upgrade, because flake8 5.0 is incompatible with flakeheaven
    "flakeheaven==3.0.0",
    "flake8-builtins",
    "flake8-blind-except",
    "flake8-logging-format",
    "flake8-bugbear",
    "flake8-annotations",
    "flake8-docstrings",
    "flake8-bandit",
    "darglint~=1.8",
    "isort",
    "black~=22.3.0",
    "safety",
    "jupyter",
    "nbqa",
    "nox",
    "mypy",
    "mypy-protobuf",
    "nbmake==1.3.4",
    "pylint",
    "bump2version~=1.0",
    "pytest~=6.2",
    "pytest-asyncio",
    "pytest-benchmark",
    "pytest-profiling",
    "xdoctest~=0.15",
    "coverage[toml]~=6.0",
    "pytest-cov~=3.0",
    "watchdog[watchmedo]~=2.1",
    "protoc-wheel-0",
    "narrow-down[scylladb,docs]"
]
experiments = [
    "pandas~=1.0",
    "tabulate",
    "tqdm"
]

[tool.coverage.paths]
source = ["src", "*/site-packages"]

[tool.coverage.run]
branch = true
source = ["narrow_down"]

[tool.coverage.report]
fail_under = 95
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug",
  "if settings.DEBUG:",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if _descriptor._USE_C_DESCRIPTORS == False:",
  "if __name__ == __main__:",
  "def main"
]
show_missing = true

[tool.coverage.html]
directory = "htmlcov"

[tool.flakeheaven]
format = "grouped"
max_line_length = 100
show_source = true
docstring-convention = "google"
extended_default_ignore = []

[tool.flakeheaven.plugins]
pyflakes = ["+*"]
mccabe = ["+*"]
"flake8-*" = [
    "+*",
]

flake8-annotations = [
    "-ANN101",  # Missing type annotation for self in method
    "-ANN102",   # Missing type annotation for cls in classmethod
    "-DAR402",    # Excess exception(s) in Raises section; Clashes with unhandled inner exceptions
]
flake8-bandit = [
    "-S311"  # Standard pseudo-random generators are not suitable for cryptographic purposes.
]
flake8-darglint = [
    "+*",
    "-DAR402",    # Excess exception(s) in Raises section; Clashes with unhandled inner exceptions
]
pycodestyle = [
    "+*",
    "-E203",  # whitespace before ‘:’, conflict with black
    "-E266",  # Comments with multiple ##
    "-W503",  # Line breaks before binary operators. Sometimes clashes with black
    "-W504",  # Line breaks after binary operators. These are preferred according to PEP8
]

[tool.flakeheaven.exceptions."narrow_down/proto/*.py"]
"flake8-*" = ["-*"]
pycodestyle = ["-*"]

[tool.flakeheaven.exceptions."tests/test_*.py"]  # Allow more sloppy styling in tests
flake8 = [
    "-W291"     # Trailing whitespace. Often appears in multiline strings in tests
]
flake8-annotations = [
    "-ANN001",  # Missing type annotation for function argument
    "-ANN201",  # Missing return type annotation for public function
    "-ANN102"   # Missing type annotation for cls in classmethod
]
flake8-bandit = [
    "-S101",  # Assert used
]
flake8-docstrings = [
    "-D103",    # Missing docstring in public function"
]

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 100
known_third_party = ["invoke", "nox", ".nox", ".venv", "local"]

[tool.black]
line-length = 100
target-version = ["py37"]
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/mypy
'''

[tool.pylint.master]
ignore = ["tests"]
reports = false
extension-pkg-allow-list="cassandra,numpy,narrow_down"
load-plugins = [
    "pylint.extensions.docparams", # Find parameters missing in docstrings
    "pylint.extensions.docstyle", # Detect wrong docstring formatting
]
disable = [
    "invalid-name", # Creates warnings for local single-letter variables
    "fixme", # fixme; Creates warnings for todo items
    "no-else-return", # Creates refactor result for indented else block; which however might be more readable
    "duplicate-code", # Unfortunately this gives alerts also for identical function signatures
    "line-too-long", # Checked already by flake8
    "c-extension-no-member",
    "invalid-name",
    "no-else-return",
    "line-too-long",
    "abstract-class-instantiated",
]

[tool.pylint.design]
max-args = 10  # Maximum number of arguments for functions
max-attributes = 15  # Maximum number of attributes for a class


[tool.pylint.TESTING]
ignore = ["narrow_down"]
reports = false
extension-pkg-allow-list="cassandra,numpy,narrow_down"
load-plugins = [
    "pylint.extensions.docparams", # Find parameters missing in docstrings
    "pylint.extensions.docstyle", # Detect wrong docstring formatting
]
disable = [
    "C",
    "redefined-outer-name",
    "protected-access",
    "invalid-name", # Creates warnings for local single-letter variables
    "fixme", # fixme; Creates warnings for todo items
    "no-else-return", # Creates refactor result for indented else block; which however might be more readable
    "duplicate-code", # Unfortunately this gives alerts also for identical function signatures
    "line-too-long", # Checked already by flake8
    "c-extension-no-member",
    "invalid-name",
    "no-else-return",
    "line-too-long",
    "abstract-class-instantiated",
]

[[tool.mypy.overrides]]
module = [
    "pytest",
    "invoke.*",
    "murmurhash.*",
    "nox.*",
    "scipy.*",
]
allow_redefinition = false
check_untyped_defs = true
ignore_errors = false
ignore_missing_imports = true
implicit_reexport = false
local_partial_types = true
strict_optional = true
strict_equality = true
no_implicit_optional = true
warn_unused_ignores = true
warn_unreachable = true
warn_no_return = true
