
name: "build & release"

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64, i686]
    steps:
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v3
      with:
        python-version: 3.9
        architecture: x64
    - uses: messense/maturin-action@v1
      with:
        manylinux: 2014
        command: build
        args: --release -o dist --no-sdist
    - name: Upload wheels
      uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: dist

  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v3
      with:
        python-version: 3.9
        architecture: x64
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        default: true
    - name: Build wheels
      uses: messense/maturin-action@v1
      with:
        target: x64
        args: --release --out dist --no-sdist
    - name: Upload wheels
      uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: dist

  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v3
      with:
        python-version: 3.9
        architecture: x64
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        default: true
    - name: Build wheels - universal2
      uses: messense/maturin-action@v1
      with:
        args: --release --universal2 --out dist --no-sdist
    - name: Upload wheels
      uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: dist

  test-install:
    needs: [ build-macos, build-windows, build-linux ]
    name: test-install-${{ matrix.os }}-python-${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.7", "3.10"]
        exclude:
          - os: Windows
            python-version: "3.10"
            # No numpy wheels yet
        include:
          - python-version: "3.9"
            os: ubuntu-latest
            publish-results: true
      fail-fast: false
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheels
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install wheel
        shell: bash
        run: |
          pip install --only-binary narrow_down --find-links ./ --force-reinstall narrow_down
          python -c 'import narrow_down.hash; print(narrow_down.hash.murmur3_32bit(b"test"))'

  test-release:
    runs-on: ubuntu-latest
    needs: [ test-install ]
    if: "github.event_name != 'pull_request'"
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheels
      - name: Publish to Test PyPI
        uses: messense/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.TEST_PYPI_TOKEN }}
        with:
          command: upload
          args: --repository-url=https://test.pypi.org/legacy/ --skip-existing *

  release:
    runs-on: ubuntu-latest
    if: "github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/')"
    needs: [ test-install, test-release ]
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheels

      - name: Publish to PyPI
        uses: messense/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        with:
          command: upload
          args: --skip-existing *
  
  github_release:
    needs: release
    name: Create Github Release
    if: "github.event_name != 'pull_request'"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Get version from tag
        id: tag_name
        shell: bash
        run: |
          echo ::set-output name=current_version::${GITHUB_REF#refs/tags/v}

      - name: Get Changelog Entry
        id: changelog_reader
        uses: mindsers/changelog-reader-action@v2.0.0
        with:
          version: ${{ steps.tag_name.outputs.current_version }}
          path: ./CHANGELOG.md

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ${{ steps.changelog_reader.outputs.changes }}
          draft: false
          prerelease: false
